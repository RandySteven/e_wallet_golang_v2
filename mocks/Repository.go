// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository[T interface{}, I interface{}] struct {
	mock.Mock
}

// BeginTrx provides a mock function with given fields: ctx
func (_m *Repository[T, I]) BeginTrx(ctx context.Context) I {
	ret := _m.Called(ctx)

	var r0 I
	if rf, ok := ret.Get(0).(func(context.Context) I); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(I)
	}

	return r0
}

// CommitOrRollback provides a mock function with given fields: ctx
func (_m *Repository[T, I]) CommitOrRollback(ctx context.Context) {
	_m.Called(ctx)
}

// FindAll provides a mock function with given fields: ctx
func (_m *Repository[T, I]) FindAll(ctx context.Context) ([]T, error) {
	ret := _m.Called(ctx)

	var r0 []T
	if rf, ok := ret.Get(0).(func(context.Context) []T); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]T)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: ctx, id
func (_m *Repository[T, I]) GetById(ctx context.Context, id uint) (*T, error) {
	ret := _m.Called(ctx, id)

	var r0 *T
	if rf, ok := ret.Get(0).(func(context.Context, uint) *T); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*T)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, entity
func (_m *Repository[T, I]) Save(ctx context.Context, entity *T) (*T, error) {
	ret := _m.Called(ctx, entity)

	var r0 *T
	if rf, ok := ret.Get(0).(func(context.Context, *T) *T); ok {
		r0 = rf(ctx, entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*T)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *T) error); ok {
		r1 = rf(ctx, entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, entity
func (_m *Repository[T, I]) Update(ctx context.Context, entity *T) (*T, error) {
	ret := _m.Called(ctx, entity)

	var r0 *T
	if rf, ok := ret.Get(0).(func(context.Context, *T) *T); ok {
		r0 = rf(ctx, entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*T)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *T) error); ok {
		r1 = rf(ctx, entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewRepository creates a new instance of Repository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewRepository[T interface{}, I interface{}](t mockConstructorTestingTNewRepository) *Repository[T, I] {
	mock := &Repository[T, I]{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
