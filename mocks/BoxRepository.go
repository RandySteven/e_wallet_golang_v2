// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	interfaces "assignment_4/interfaces"
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "assignment_4/entities/models"
)

// BoxRepository is an autogenerated mock type for the BoxRepository type
type BoxRepository struct {
	mock.Mock
}

// BeginTrx provides a mock function with given fields: ctx
func (_m *BoxRepository) BeginTrx(ctx context.Context) interfaces.BoxRepository {
	ret := _m.Called(ctx)

	var r0 interfaces.BoxRepository
	if rf, ok := ret.Get(0).(func(context.Context) interfaces.BoxRepository); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.BoxRepository)
		}
	}

	return r0
}

// CommitOrRollback provides a mock function with given fields: ctx
func (_m *BoxRepository) CommitOrRollback(ctx context.Context) {
	_m.Called(ctx)
}

// FindAll provides a mock function with given fields: ctx
func (_m *BoxRepository) FindAll(ctx context.Context) ([]models.Box, error) {
	ret := _m.Called(ctx)

	var r0 []models.Box
	if rf, ok := ret.Get(0).(func(context.Context) []models.Box); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Box)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: ctx, id
func (_m *BoxRepository) GetById(ctx context.Context, id uint) (*models.Box, error) {
	ret := _m.Called(ctx, id)

	var r0 *models.Box
	if rf, ok := ret.Get(0).(func(context.Context, uint) *models.Box); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Box)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetNineRandomBoxes provides a mock function with given fields: ctx
func (_m *BoxRepository) GetNineRandomBoxes(ctx context.Context) ([]models.Box, error) {
	ret := _m.Called(ctx)

	var r0 []models.Box
	if rf, ok := ret.Get(0).(func(context.Context) []models.Box); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Box)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, entity
func (_m *BoxRepository) Save(ctx context.Context, entity *models.Box) (*models.Box, error) {
	ret := _m.Called(ctx, entity)

	var r0 *models.Box
	if rf, ok := ret.Get(0).(func(context.Context, *models.Box) *models.Box); ok {
		r0 = rf(ctx, entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Box)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Box) error); ok {
		r1 = rf(ctx, entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, entity
func (_m *BoxRepository) Update(ctx context.Context, entity *models.Box) (*models.Box, error) {
	ret := _m.Called(ctx, entity)

	var r0 *models.Box
	if rf, ok := ret.Get(0).(func(context.Context, *models.Box) *models.Box); ok {
		r0 = rf(ctx, entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Box)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Box) error); ok {
		r1 = rf(ctx, entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewBoxRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewBoxRepository creates a new instance of BoxRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewBoxRepository(t mockConstructorTestingTNewBoxRepository) *BoxRepository {
	mock := &BoxRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
