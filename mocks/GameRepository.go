// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	interfaces "git.garena.com/sea-labs-id/bootcamp/batch-02/randy-steven/assignment-go-rest-api/interfaces"
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "git.garena.com/sea-labs-id/bootcamp/batch-02/randy-steven/assignment-go-rest-api/entities/models"
)

// GameRepository is an autogenerated mock type for the GameRepository type
type GameRepository struct {
	mock.Mock
}

// BeginTrx provides a mock function with given fields: ctx
func (_m *GameRepository) BeginTrx(ctx context.Context) interfaces.GameRepository {
	ret := _m.Called(ctx)

	var r0 interfaces.GameRepository
	if rf, ok := ret.Get(0).(func(context.Context) interfaces.GameRepository); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.GameRepository)
		}
	}

	return r0
}

// CommitOrRollback provides a mock function with given fields: ctx
func (_m *GameRepository) CommitOrRollback(ctx context.Context) {
	_m.Called(ctx)
}

// Count provides a mock function with given fields: ctx
func (_m *GameRepository) Count(ctx context.Context) (uint, error) {
	ret := _m.Called(ctx)

	var r0 uint
	if rf, ok := ret.Get(0).(func(context.Context) uint); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(uint)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateRewardTransaction provides a mock function with given fields: ctx, game
func (_m *GameRepository) CreateRewardTransaction(ctx context.Context, game *models.Game) (*models.Game, error) {
	ret := _m.Called(ctx, game)

	var r0 *models.Game
	if rf, ok := ret.Get(0).(func(context.Context, *models.Game) *models.Game); ok {
		r0 = rf(ctx, game)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Game)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Game) error); ok {
		r1 = rf(ctx, game)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindAll provides a mock function with given fields: ctx
func (_m *GameRepository) FindAll(ctx context.Context) ([]models.Game, error) {
	ret := _m.Called(ctx)

	var r0 []models.Game
	if rf, ok := ret.Get(0).(func(context.Context) []models.Game); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Game)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: ctx, id
func (_m *GameRepository) GetById(ctx context.Context, id uint) (*models.Game, error) {
	ret := _m.Called(ctx, id)

	var r0 *models.Game
	if rf, ok := ret.Get(0).(func(context.Context, uint) *models.Game); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Game)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, entity
func (_m *GameRepository) Save(ctx context.Context, entity *models.Game) (*models.Game, error) {
	ret := _m.Called(ctx, entity)

	var r0 *models.Game
	if rf, ok := ret.Get(0).(func(context.Context, *models.Game) *models.Game); ok {
		r0 = rf(ctx, entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Game)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Game) error); ok {
		r1 = rf(ctx, entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, entity
func (_m *GameRepository) Update(ctx context.Context, entity *models.Game) (*models.Game, error) {
	ret := _m.Called(ctx, entity)

	var r0 *models.Game
	if rf, ok := ret.Get(0).(func(context.Context, *models.Game) *models.Game); ok {
		r0 = rf(ctx, entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Game)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.Game) error); ok {
		r1 = rf(ctx, entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewGameRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewGameRepository creates a new instance of GameRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewGameRepository(t mockConstructorTestingTNewGameRepository) *GameRepository {
	mock := &GameRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
