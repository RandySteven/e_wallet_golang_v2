// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "assignment_4/entities/models"

	req "assignment_4/entities/payload/req"

	res "assignment_4/entities/payload/res"
)

// UserUsecase is an autogenerated mock type for the UserUsecase type
type UserUsecase struct {
	mock.Mock
}

// ForgotPassword provides a mock function with given fields: ctx, forgot
func (_m *UserUsecase) ForgotPassword(ctx context.Context, forgot *req.ForgotPasswordRequest) (*models.ForgotPasswordToken, error) {
	ret := _m.Called(ctx, forgot)

	var r0 *models.ForgotPasswordToken
	if rf, ok := ret.Get(0).(func(context.Context, *req.ForgotPasswordRequest) *models.ForgotPasswordToken); ok {
		r0 = rf(ctx, forgot)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ForgotPasswordToken)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *req.ForgotPasswordRequest) error); ok {
		r1 = rf(ctx, forgot)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserDetail provides a mock function with given fields: ctx, id
func (_m *UserUsecase) GetUserDetail(ctx context.Context, id uint) (*res.UserDetail, error) {
	ret := _m.Called(ctx, id)

	var r0 *res.UserDetail
	if rf, ok := ret.Get(0).(func(context.Context, uint) *res.UserDetail); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*res.UserDetail)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// LoginUser provides a mock function with given fields: ctx, login
func (_m *UserUsecase) LoginUser(ctx context.Context, login *req.UserLoginRequest) (*res.UserLoginResponse, error) {
	ret := _m.Called(ctx, login)

	var r0 *res.UserLoginResponse
	if rf, ok := ret.Get(0).(func(context.Context, *req.UserLoginRequest) *res.UserLoginResponse); ok {
		r0 = rf(ctx, login)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*res.UserLoginResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *req.UserLoginRequest) error); ok {
		r1 = rf(ctx, login)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterUser provides a mock function with given fields: ctx, user
func (_m *UserUsecase) RegisterUser(ctx context.Context, user *models.User) (*models.User, error) {
	ret := _m.Called(ctx, user)

	var r0 *models.User
	if rf, ok := ret.Get(0).(func(context.Context, *models.User) *models.User); ok {
		r0 = rf(ctx, user)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.User) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewUserUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewUserUsecase creates a new instance of UserUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewUserUsecase(t mockConstructorTestingTNewUserUsecase) *UserUsecase {
	mock := &UserUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
