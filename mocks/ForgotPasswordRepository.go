// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	interfaces "assignment_4/interfaces"
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "assignment_4/entities/models"
)

// ForgotPasswordRepository is an autogenerated mock type for the ForgotPasswordRepository type
type ForgotPasswordRepository struct {
	mock.Mock
}

// BeginTrx provides a mock function with given fields: ctx
func (_m *ForgotPasswordRepository) BeginTrx(ctx context.Context) interfaces.ForgotPasswordRepository {
	ret := _m.Called(ctx)

	var r0 interfaces.ForgotPasswordRepository
	if rf, ok := ret.Get(0).(func(context.Context) interfaces.ForgotPasswordRepository); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.ForgotPasswordRepository)
		}
	}

	return r0
}

// CommitOrRollback provides a mock function with given fields: ctx
func (_m *ForgotPasswordRepository) CommitOrRollback(ctx context.Context) {
	_m.Called(ctx)
}

// FindAll provides a mock function with given fields: ctx
func (_m *ForgotPasswordRepository) FindAll(ctx context.Context) ([]models.ForgotPasswordToken, error) {
	ret := _m.Called(ctx)

	var r0 []models.ForgotPasswordToken
	if rf, ok := ret.Get(0).(func(context.Context) []models.ForgotPasswordToken); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.ForgotPasswordToken)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: ctx, id
func (_m *ForgotPasswordRepository) GetById(ctx context.Context, id uint) (*models.ForgotPasswordToken, error) {
	ret := _m.Called(ctx, id)

	var r0 *models.ForgotPasswordToken
	if rf, ok := ret.Get(0).(func(context.Context, uint) *models.ForgotPasswordToken); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ForgotPasswordToken)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, entity
func (_m *ForgotPasswordRepository) Save(ctx context.Context, entity *models.ForgotPasswordToken) (*models.ForgotPasswordToken, error) {
	ret := _m.Called(ctx, entity)

	var r0 *models.ForgotPasswordToken
	if rf, ok := ret.Get(0).(func(context.Context, *models.ForgotPasswordToken) *models.ForgotPasswordToken); ok {
		r0 = rf(ctx, entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ForgotPasswordToken)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.ForgotPasswordToken) error); ok {
		r1 = rf(ctx, entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, entity
func (_m *ForgotPasswordRepository) Update(ctx context.Context, entity *models.ForgotPasswordToken) (*models.ForgotPasswordToken, error) {
	ret := _m.Called(ctx, entity)

	var r0 *models.ForgotPasswordToken
	if rf, ok := ret.Get(0).(func(context.Context, *models.ForgotPasswordToken) *models.ForgotPasswordToken); ok {
		r0 = rf(ctx, entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.ForgotPasswordToken)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.ForgotPasswordToken) error); ok {
		r1 = rf(ctx, entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewForgotPasswordRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewForgotPasswordRepository creates a new instance of ForgotPasswordRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewForgotPasswordRepository(t mockConstructorTestingTNewForgotPasswordRepository) *ForgotPasswordRepository {
	mock := &ForgotPasswordRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
