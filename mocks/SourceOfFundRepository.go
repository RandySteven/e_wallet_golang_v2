// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	interfaces "assignment_4/interfaces"
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "assignment_4/entities/models"
)

// SourceOfFundRepository is an autogenerated mock type for the SourceOfFundRepository type
type SourceOfFundRepository struct {
	mock.Mock
}

// BeginTrx provides a mock function with given fields: ctx
func (_m *SourceOfFundRepository) BeginTrx(ctx context.Context) interfaces.SourceOfFundRepository {
	ret := _m.Called(ctx)

	var r0 interfaces.SourceOfFundRepository
	if rf, ok := ret.Get(0).(func(context.Context) interfaces.SourceOfFundRepository); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interfaces.SourceOfFundRepository)
		}
	}

	return r0
}

// CommitOrRollback provides a mock function with given fields: ctx
func (_m *SourceOfFundRepository) CommitOrRollback(ctx context.Context) {
	_m.Called(ctx)
}

// FindAll provides a mock function with given fields: ctx
func (_m *SourceOfFundRepository) FindAll(ctx context.Context) ([]models.SourceOfFund, error) {
	ret := _m.Called(ctx)

	var r0 []models.SourceOfFund
	if rf, ok := ret.Get(0).(func(context.Context) []models.SourceOfFund); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.SourceOfFund)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetById provides a mock function with given fields: ctx, id
func (_m *SourceOfFundRepository) GetById(ctx context.Context, id uint) (*models.SourceOfFund, error) {
	ret := _m.Called(ctx, id)

	var r0 *models.SourceOfFund
	if rf, ok := ret.Get(0).(func(context.Context, uint) *models.SourceOfFund); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.SourceOfFund)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetSourceOfFundBySource provides a mock function with given fields: ctx, source
func (_m *SourceOfFundRepository) GetSourceOfFundBySource(ctx context.Context, source string) (*models.SourceOfFund, error) {
	ret := _m.Called(ctx, source)

	var r0 *models.SourceOfFund
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.SourceOfFund); ok {
		r0 = rf(ctx, source)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.SourceOfFund)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, source)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, entity
func (_m *SourceOfFundRepository) Save(ctx context.Context, entity *models.SourceOfFund) (*models.SourceOfFund, error) {
	ret := _m.Called(ctx, entity)

	var r0 *models.SourceOfFund
	if rf, ok := ret.Get(0).(func(context.Context, *models.SourceOfFund) *models.SourceOfFund); ok {
		r0 = rf(ctx, entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.SourceOfFund)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.SourceOfFund) error); ok {
		r1 = rf(ctx, entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, entity
func (_m *SourceOfFundRepository) Update(ctx context.Context, entity *models.SourceOfFund) (*models.SourceOfFund, error) {
	ret := _m.Called(ctx, entity)

	var r0 *models.SourceOfFund
	if rf, ok := ret.Get(0).(func(context.Context, *models.SourceOfFund) *models.SourceOfFund); ok {
		r0 = rf(ctx, entity)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.SourceOfFund)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *models.SourceOfFund) error); ok {
		r1 = rf(ctx, entity)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewSourceOfFundRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewSourceOfFundRepository creates a new instance of SourceOfFundRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewSourceOfFundRepository(t mockConstructorTestingTNewSourceOfFundRepository) *SourceOfFundRepository {
	mock := &SourceOfFundRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
