// Code generated by mockery v2.14.0. DO NOT EDIT.

package mocks

import (
	entities "git.garena.com/sea-labs-id/bootcamp/batch-02/randy-steven/assignment-go-rest-api/entities"
	context "context"

	mock "github.com/stretchr/testify/mock"

	models "git.garena.com/sea-labs-id/bootcamp/batch-02/randy-steven/assignment-go-rest-api/entities/models"

	req "git.garena.com/sea-labs-id/bootcamp/batch-02/randy-steven/assignment-go-rest-api/entities/payload/req"

	res "git.garena.com/sea-labs-id/bootcamp/batch-02/randy-steven/assignment-go-rest-api/entities/payload/res"
)

// TransactionUsecase is an autogenerated mock type for the TransactionUsecase type
type TransactionUsecase struct {
	mock.Mock
}

// CreateTopupTransaction provides a mock function with given fields: ctx, topup
func (_m *TransactionUsecase) CreateTopupTransaction(ctx context.Context, topup *req.TopupRequest) (*models.Transaction, error) {
	ret := _m.Called(ctx, topup)

	var r0 *models.Transaction
	if rf, ok := ret.Get(0).(func(context.Context, *req.TopupRequest) *models.Transaction); ok {
		r0 = rf(ctx, topup)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *req.TopupRequest) error); ok {
		r1 = rf(ctx, topup)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// CreateTransferTransaction provides a mock function with given fields: ctx, transfer
func (_m *TransactionUsecase) CreateTransferTransaction(ctx context.Context, transfer *req.TransferRequest) (*models.Transaction, error) {
	ret := _m.Called(ctx, transfer)

	var r0 *models.Transaction
	if rf, ok := ret.Get(0).(func(context.Context, *req.TransferRequest) *models.Transaction); ok {
		r0 = rf(ctx, transfer)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.Transaction)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *req.TransferRequest) error); ok {
		r1 = rf(ctx, transfer)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllTransactionsRecords provides a mock function with given fields: ctx, query, userId
func (_m *TransactionUsecase) GetAllTransactionsRecords(ctx context.Context, query *entities.QueryCondition, userId uint) (*res.TransactionPaginationResponses, error) {
	ret := _m.Called(ctx, query, userId)

	var r0 *res.TransactionPaginationResponses
	if rf, ok := ret.Get(0).(func(context.Context, *entities.QueryCondition, uint) *res.TransactionPaginationResponses); ok {
		r0 = rf(ctx, query, userId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*res.TransactionPaginationResponses)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *entities.QueryCondition, uint) error); ok {
		r1 = rf(ctx, query, userId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewTransactionUsecase interface {
	mock.TestingT
	Cleanup(func())
}

// NewTransactionUsecase creates a new instance of TransactionUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewTransactionUsecase(t mockConstructorTestingTNewTransactionUsecase) *TransactionUsecase {
	mock := &TransactionUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
